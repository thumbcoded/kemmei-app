const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");

const app = express();
const PORT = 3000;

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB connection
mongoose.connect("mongodb://localhost:27017/kemmei")
  .then(() => {
    console.log("✅ Connected to MongoDB");
  })
  .catch(err => {
    console.error("❌ MongoDB connection error:", err);
  });

// Load the Card model
const Card = require("./models/card");

// Test route
app.get("/", (req, res) => {
  res.send("Kemmei backend is up and running! 🚀");
});

// 🛠 Get filtered cards
app.get("/api/cards", async (req, res) => {
  try {
    const { cert_id, domain_id, difficulty } = req.query;
    const filter = {};

    if (cert_id) {
      filter.cert_id = { $in: [cert_id] }; // cert_id is an array in the Card model
    }
    if (domain_id) {
      filter.domain_id = domain_id;
    }
    if (difficulty) {
      filter.difficulty = difficulty.toLowerCase(); // enforce lowercase for matching
    }

    const cards = await Card.find(filter).limit(50);
    res.json(cards);
  } catch (err) {
    console.error("❌ Error fetching cards:", err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// 🔍 Get all card IDs only (for frontend use)
app.get("/api/cards/ids", async (req, res) => {
  try {
    const ids = await Card.find({}, "_id").sort({ _id: 1 }).lean();
    res.json(ids.map(c => c._id));
  } catch (err) {
    res.status(500).json({ success: false, error: err.message });
  }
});

// 🆕 Get the next N available card IDs (e.g., ["Q005", "Q006", ...])
app.get("/api/cards/next-ids/:count", async (req, res) => {
  try {
    const count = parseInt(req.params.count, 10) || 1;

    const existing = await Card.find({}, "_id").lean();
    const used = new Set(existing.map(c => parseInt(c._id.replace("Q", ""), 10)));

    const ids = [];
    let next = 1;
    while (ids.length < count) {
      if (!used.has(next)) {
        ids.push("Q" + next.toString().padStart(3, "0"));
      }
      next++;
    }

    res.json(ids);
  } catch (err) {
    res.status(500).json({ success: false, error: err.message });
  }
});

// ➕ Add a new card
app.post("/api/cards", async (req, res) => {
  try {
    const newCard = new Card(req.body);
    await newCard.save();
    res.json({ success: true, card: newCard });
  } catch (err) {
    res.status(400).json({ success: false, error: err.message });
  }
});

// 🗑️ DELETE a card
app.delete("/api/cards/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await Card.findByIdAndDelete(id);
    if (!deleted) {
      return res.status(404).json({ success: false, message: "Card not found" });
    }
    res.json({ success: true, message: "Card deleted" });
  } catch (err) {
    console.error("❌ Error deleting card:", err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`🧠 Kemmei API is listening at http://localhost:${PORT}`);
});
const fs = require("fs");
const path = require("path");

const domainMapPath = path.join(__dirname, "..", "js", "domainmap.js");

app.post("/api/add-title", async (req, res) => {
  const { _id, title } = req.body;

  if (!_id || !title) {
    return res.status(400).json({ error: "Missing _id or title" });
  }

  try {
    let contents = fs.readFileSync(domainMapPath, "utf8");

    // Inject into certNames
    const certNameRegex = /export const certNames\s*=\s*{([\s\S]*?)}/m;
    const match = certNameRegex.exec(contents);

    if (!match) return res.status(500).send("certNames not found");

    const existingEntry = new RegExp(`["']${_id}["']:`).test(match[1]);
    if (existingEntry) return res.status(409).send("Title already exists");

    const newEntry = `  "${_id}": "${title}",\n`;
    const updatedCertNames = contents.replace(
      certNameRegex,
      (fullMatch, inner) => `export const certNames = {\n${newEntry}${inner}}`
    );

    fs.writeFileSync(domainMapPath, updatedCertNames, "utf8");

    res.status(201).json({ success: true, message: "Title added" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to update domainmap.js" });
  }
});
