# DNS and Network Services

## DNS (Domain Name System)

DNS stands for the domain name system and this is one of the most critical resources and services available on our networks. That's because we use DNS to be able to provide IP addresses when all we remember is a fully qualified domain name. For example, you could type into your browser www.professormesser.com and behind the scenes a DNS resolution occurs that translates the name www.professormesser.com into the IP address that is associated with that particular web server address.

This means that we don't have to remember any specific IP addresses - all we have to remember is the name of the server that we want to communicate to. Behind the scenes DNS will make sure that we're able to connect to that IP address. DNS provides this resolution and many other features as well, some of which we'll learn about in this video today.

### DNS Hierarchy and Structure

This DNS database is a hierarchy that allows us to find the IP address of any fully qualified domain name on the worldwide internet. We refer to DNS as a distributed database because this is a database that is scattered throughout the entire internet. Portions of this database are contained on different servers located on different networks around the world.

If we were to drill down on the specifics of the DNS standard, you would see that there were 13 separate root server clusters. This cluster is more than simply 13 separate servers - in reality there are over a thousand servers making up that root server cluster. That root cluster allows us to then communicate with DNS servers that are handling top level domains.

These generic top level domains or gTLDs are the ones that you might recognize: .com, .org, .net and so on. You might also see these top level domains separated by country - there are about 275 country codes. For example, the United States is the .us domain, Canada is .ca, the United Kingdom is .uk, and so on.

When we say that the DNS database is a hierarchy, this is a visual representation of what we mean. Underneath the top level domains is a domain name such as professormesser.com, and you'll notice there's the domain and just under the .com is the Professor Messer. You can continue to add layers to this hierarchy - for example, our web server at Professor Messer is www.professormesser.com. We might also have mail.professormesser.com and so on.

And of course you could have individual servers and devices underneath those domain names as well, so you could have a katy.east.professormesser.com or a judy.west.professormesser.com. This allows you to organize your DNS infrastructure into a way that makes sense for your organization and have it accessible to anyone in the world.

### DNS Tools

If you wanted to get some insight into how a particular DNS server might be configured, you might want to use different tools to be able to access that database. One of these tools is the dig command. Dig is a common command on Linux and Mac OS, and some versions of Windows also have a dig version that you could install. Dig allows you to perform a query against a DNS server.

So if we dig www.professormesser.com, we get the results that are on this page. It shows us what commands we are using, gives us exactly what question is being asked of that particular DNS server, and then provides answers to the question that was asked. In this case, making a query for www.professormesser.com returns the remaining IP addresses to communicate to our web server.

If you're on Windows, you can use the nslookup command to provide the same information. For example, nslookup of professormesser.com will return the same answers with the same three IP addresses.

### DNS Resource Records

When we make that query to the DNS server, we are returned information that is contained within the records of that DNS database. Those records are referred to as resource records or RR. Those resource records contain information about the IP addresses we'd like to query, their certificate information, email details, host alias names, and much more.

This is one of the reasons that we often say that a DNS configuration is not something you should toy around with if you're not familiar with what you're doing. One mistake made to the database inside this DNS server could cause one or more of your devices to suddenly become unavailable to anyone else on the internet. If you are going to make a change to a DNS server, just keep in mind that you should always have a backup and a way to easily revert to that backup if you run into any problems.

### DNS Record Types

#### A and AAAA Records

One of the most common records in a DNS server is an A record. You might also see these as a quad-A record or AAAA record. These are records that define the IP address for a particular host name. If you're adding or modifying an A record, that address record is used for IP version 4 addresses. If you're modifying a quad-A record, that record is being used for IP version 6 addresses.

To be able to see what this might look like in a configuration file, I have a record here for my web server www.professormesser.com. This is an internet address or IP version 4 address, and the A specifies that this is an address record, and the other part of this record shows it to be 162.159.246.164. That is the IP address that I would like returned to an end user if they request it for www.professormesser.com.

So if someone sends a request to a DNS server and asks what's the IP address of www.professormesser.com, this record is accessed and it provides the answer of 162.159.246.164.

The time to live (TTL) is how long someone will remember this IP address. After 15 minutes, this record will time out from a user's workstation and they will need to request that IP address to continue communicating to www.professormesser.com. This allows me to make changes to this IP address at any time and I know that all of those changes will eventually be rolled out across the internet in no more than 15 minutes.

#### CNAME Records

There may be times when a particular server is referenced using different names. For example, you might have one server that's used as a web server that might also be your DNS server. It might also be an NTP server and it also might be a mail server. But instead of referencing that server with a single name, we can use different names to associate the different resources.

For example, if you have a server called mail.example.com, you might also want to use canonical names or CNAMEs for that server for chat, FTP, and www. This means every time somebody references chat.example.com, ftp.example.com, or www.example.com, they're all really communicating to a single server called mail.example.com.

This makes it very easy to administer. If you ever need to change the IP address of mail.example.com, you simply change the A record for mail.example.com and all of the canonical records can stay exactly the same.

#### MX Records

One of the most critical records on any DNS server has got to be the MX records. This stands for the mail exchanger records, and these make sure that you're able to both send and receive email messages from your domain.

The MX record itself is relatively straightforward. It starts with an IN for the internet, MX stands for the mail exchanger record, and then you simply have the name of the mail server - in this case it's mail.example.com.

When other mail servers need to send an email message to james@professormesser.com, they reference my mail server to see where the MX record is, determine the name of the mail server, then perform another lookup to determine the address record for that mail server, and now they know exactly what IP address they should be sending that email to.

#### TXT Records

So far we've talked a lot about IP addresses, fully qualified domain names, and the resolution between those two in our DNS server. But we can also use our DNS server to store important information that we would like others to be able to access. We refer to these records as text records or TXT records.

These are human-readable text records that anyone could reference from our DNS server. Sometimes you'll see these DNS records being used for verification. Often you'll be configuring an email setting and the email configuration needs to ensure that you have control of your DNS server. To be able to verify that, you add a special text record into your DNS that they can then access from their site.

There are a number of text records that we use to minimize the instance of spam, and we'll talk more about those specific text messages as well.

##### DKIM Records

One of the ways we do this is with a DKIM record - a DomainKeys Identified Mail record. If you were to look at the text records on a DNS server, you may see one text record that specifies d=DKIM. That is a DomainKeys Identified Mail record.

In the DNS server itself, you'll find a public key associated with this record. On your email server is the associated private key of this key pair. All of the outgoing messages from the Professor Messer website are digitally signed with my private key. When another mail server receives an email that I have sent, it sees that that message has been digitally signed. It then can refer to my public DNS server to retrieve the public key and then verify that the digital signature is indeed valid. This means the recipient knows that that message really was sent from my official email server.

##### SPF Records

It's very common for an organization to send email from many different resources. There might be a private internal email server that's being used for outgoing mail. There might also be a third party that's used to send bulk email messages, perhaps once a day or once a week. And there needs to be a way that everyone can trust that all of those different email servers are legitimate and have been configured specifically to send messages on my behalf.

The way that we would provide that information is through a text record that contains Sender Policy Framework or SPF information. This SPF record allows us to put all of the email servers that we use. This means if your email server receives a message from professormesser.com, it can look at that message to see what the origination server was and then verify that that origination server is listed in our list of SPF allowed hosts.

If you receive a message from professormesser.com and the origination email server is not in this list, then you've probably received a message from a third party that is not associated with our domain.

##### DMARC Records

This means any email server that is receiving a message can perform a number of different checks for the validity of that message. It can perform an SPF check to confirm that it really did come from a trusted server, and it can check the digital signature using the public key located in the DKIM text record.

But what if one or both of these tests is invalid? What if this message did not originate from a trusted email server for that domain, and what if it did not have a valid digital signature? In that case, the receiver of that email message needs to make a decision on what to do with that email. Is this email thrown out completely? Is the email allowed to continue through to the end user? Or is it placed in a spam or quarantine folder?

By default, it would be nice if I could tell the receiving server that if you receive any messages from me that don't validate with a proper mail server or they don't validate with a proper digital signature, that those mail messages should be dropped and not sent to the user. Or I might have a different policy that says don't remove that particular email message, but send it into the spam folder and let the user make a decision on whether that is a legitimate email or not.

The way that we're able to let that recipient of the email message know our policy is through the use of a DMARC or Domain-based Message Authentication, Reporting and Conformance record. This is a text record that allows us, the domain owner, to determine what happens with messages that are identified as spam but have our domain associated with them.

Third parties can look at this record on our DNS server and see that we would either like to allow all messages to be accepted, send those messages to a spam folder, or simply reject the email completely. We can also include an email address with that DMARC record so that the disposition of that particular message is sent to a central reporting tool. That means that we can create a report showing how many of our email messages got through and how many email messages were identified as spam.

## DHCP (Dynamic Host Configuration Protocol)

We've become very accustomed to turning on our desktop computers, our laptops, or our mobile devices and automatically getting an IP address. But it wasn't always this way. There was a time where you'd have to manually configure all of these configuration settings in your device. So you would manually have to put in your IP address, your subnet mask, your default gateway, your DNS servers, and any other IP configuration parameters.

If you had a small number of devices, then you probably could configure these devices manually with the static IP addresses that never changed. But today we have thousands of devices on one single network, and it would be very difficult for an administrator to manually configure every single one of those devices. That's why we created DHCP or the Dynamic Host Configuration Protocol.

This is a protocol created in 1997 to allow us, the system administrator, to automatically assign this information across all of the systems in our infrastructure. So the next time you go to a coffee shop, you open your laptop and immediately start accessing the internet, you can thank DHCP.

### The DORA Process

Although we don't often see this process that occurs behind the scenes to be able to assign these IP addresses, it is important as a system administrator that you know what's really going on. We often refer to this automated process as DORA - D-O-R-A. DORA stands for Discover, Offer, Request, and Acknowledge. This process occurs every time someone connects to the network for the first time and needs to get an IP address from a DHCP server.

Let's take a scenario where we have Sam on the network who currently has just turned on her computer and does not yet have an IP address. We also have Jack on this network who's also just turned on his laptop, and Jack also does not have an IP address.

Let's start with Sam's laptop. The default configuration for practically every operating system these days is to look for a new IP address using DHCP. So the first thing that Sam's computer will do is to perform step one, or the Discover step. This means that her laptop will go out to the network and try to discover where all of the different DHCP servers might be and what IP addresses might be available for her workstation.

If you were to capture packets on this network, you would see a DHCP discover message sent from Sam's computer. Currently, since Sam does not have an IP address, it is sent from IP address 0.0.0.0 over UDP port 68, and it's sent across the network as a broadcast so that every device on the network will see this communication.

This broadcast will go from Sam's computer. When it reaches the switch, because it's a broadcast, it is sent to all of the devices on this local subnet. One of the devices that received that discover message is the DHCP server that's on this network, and you can see this DHCP server has an IP address of 10.10.1.99.

This server now sends a DHCP offer to Sam's workstation using a broadcast because obviously Sam does not yet have an IP address. So this step two offer is being sent from the DHCP server to an all-ones broadcast or 255.255.255.255.

Here's the offer from the DHCP server, and as a broadcast it's sent to all of the devices on this local subnet. Obviously Sam has also received this broadcast which contains an offer from the DHCP server of an IP address that could be configured for Sam's machine. Obviously if there were more DHCP servers on this network, Sam would receive multiple offers to choose from.

And in step three, or the Request part of this communication, Sam is going to choose one of the offers that's been received and send a request for that IP address back to the DHCP server. The actual packet is a request sent from Sam's computer using 0.0.0.0 because again Sam does not yet have an IP address. It is sent from UDP port 68 to 255.255.255.255 over UDP port 67.

This is obviously sent from Sam's computer, and since it is a broadcast, all of the devices on this local subnet will receive this request, including the DHCP server.

The last step is an important one because it locks in that IP address on Sam's device. This is sent as an acknowledgment from the DHCP server acknowledging that that IP address has now been assigned to Sam's machine and that IP address won't be assigned to anyone else for the duration of that lease.

This is sent directly from the DHCP server in this case, 10.10.1.99, and again it's sent as a broadcast to everyone on this network to 255.255.255.255 over UDP port 68. And now that Sam has received that acknowledgment, the IP address can finally be updated on Sam's computer, and Sam has now been assigned 10.10.1.42.

This is the process that occurs for anyone connecting to the network. So when Jack turns on his computer, he will also go through that same four-step process.

### DHCP Scopes

How did the DHCP server know what IP address to assign to Sam's workstation? It was able to do that because a predefined list of IP addresses was already configured on that DHCP server. We refer to that predefined list of IP addresses and all of the other configuration settings for that device as a DHCP scope.

This might include all of the IP addresses available for devices on this network, as well as excluded addresses that might be used for other devices on the network that should not be given out as an IP address. For example, you might have switches or routers on this network that have static IP addresses. We don't want to assign those IP addresses to another device, creating a conflict on the network.

We also configure the subnet mask as part of this DHCP scope, lease durations that we might use, and any other options that are important for the IP configuration of these devices - things like a DNS server, a default gateway, voice over IP server IP addresses, and other details.

Inside of that DHCP scope are pools of IP addresses that the DHCP server will choose from to be able to automatically assign IP addresses to other devices. These will usually be large groups of IP addresses. For example, you might have 192.168.1.0/24, 192.168.2.0/24, 192.168.3.0/24, and so on. If anyone connects to the network from any of those subnets, the DHCP server will pull from the appropriate pool and provide that available IP address to the end device.

Although this is often a single large contiguous pool of IP addresses, it doesn't have to be. We could certainly configure different sections of IP addresses to assign, which means you might put exclusions in the middle of the pool so that certain addresses will always be assigned to a particular device, and you can use all of the other addresses as any available dynamic address for any other device on the network.

### DHCP Reservations

We often think of DHCP as randomly assigning any available IP address to any device that connects to the network. But sometimes you do need an IP address to stay with a particular device. Maybe it's a file server or a web server, or maybe you always want your router to have the same IP address every time it's turned on.

Now of course, you could go to all of those servers and routers and switches and manually configure a static address on those devices. But if you happen to change anything with your IP addressing scheme, that means you would have to revisit all of those devices to manually update any configuration changes.

If you're using a DHCP address reservation, you can make all of those changes in the DHCP server itself and not have to manually update all of those individual devices. The way that we're able to associate a device with a particular IP address is we configure the MAC address of that device in the DHCP server itself. We would specify that this MAC address always receives this particular IP address.

Sometimes you might see this referred to as a static DHCP assignment, a static DHCP, or simply an IP reservation.

## LANs and VLANs

Let's start our conversation referring to LANs or local area networks. This is a group of devices that are connected together into a single broadcast domain. That means if we send a broadcast out on one of these devices to this LAN, all of the other devices in this LAN will also see the broadcast.

Over on this side we have a separate switch, and because it is a separate switch, it is a separate broadcast domain. Which means any device on this network that sends a broadcast would only be seen by other devices connected to that same broadcast domain. That means if we send a broadcast over on the red network, no devices on the blue network will be able to see that broadcast because this is a single broadcast domain that is separate from all of the other broadcast domains.

From a security and an organizational perspective, this is a very good design. Everyone on the red network is connected to the red network switch, and everybody on the blue network is connected to the blue network switch. But one of the challenges with this is that it doesn't make very efficient use of our switches.

For example, we have a switch here with 24 interfaces and only two devices are connected to that device. We have a separate 24-port switch on this side, and that switch also only has two devices on it. If we wanted to save money and save space in our rack, we would put all of these devices on the same physical switch. But when we do that, we have a problem with all of these devices being on the same broadcast domain.

### Virtual LANs (VLANs)

Fortunately, many of our modern switches have the ability to configure a virtual local area network or a VLAN. A virtual local area network means that we can assign different interfaces on a switch to belong to a particular VLAN.

This is a very good example of combining two separate switches into one single switch, but then assigning different interfaces to different VLANs. That means we can have some interfaces on the switch on the red VLAN and other interfaces on the switch on the blue VLAN. And because these VLANs are also separate broadcast domains, if we send a broadcast from any of these devices on the blue network, that broadcast is only seen by other devices on these blue network interfaces.

The same thing applies for the red network. If we send a broadcast on a red network device, only devices that are part of that VLAN will be able to see that broadcast. Now we have a single switch with a single power source taking up the space of a single switch in one rack, and we're able to support multiple VLANs on that same physical device.

This is obviously a much more efficient way to combine these network interfaces together, and it's a way that we could take what used to be two physical devices and now have them running on one single device with logical separation between these different interfaces.

We can support many VLANs on a single switch. This particular switch has been configured with three separate VLANs, and we can have some devices connected to VLAN 1 which is the gate room. We have other devices that are connected to VLAN 2 - that's the dialing room. And then VLAN 3 is the infirmary.

The devices on one VLAN are not able to communicate to devices on the other VLANs because they have been put into a completely separate broadcast domain. From a networking perspective, there might be a good reason to allow these different VLANs to communicate to each other, and in that particular case we need a router to be able to route information from one VLAN to another. Some switches allow you to configure routing functionality within that switch itself, or you may use an external router just to provide communication between these different VLANs.

## VPN (Virtual Private Network)

Another important service that you'll find on most people's networks is a VPN or virtual private network. This allows devices to communicate to each other across a network, but it encrypts all of the data that's being sent over the network. If someone was to capture that data and view it in a packet capture program or something similar, they wouldn't be able to understand anything that was being sent back and forth between those devices.

There's usually a specialized device that is able to encrypt and decrypt this information in real time. We refer to that device as a concentrator. This is usually built into a firewall or some other type of purpose-built appliance. This allows everyone to connect to a central concentrator which is then responsible for converting between the encrypted data coming across the network, decrypting that so that we can view it on the inside of our network, and reversing that process to send information back to the originating station.

This is commonly implemented as hardware, but there are VPN concentrator solutions that are provided as software only that we can run on an existing server. Many operating systems have VPN client software that's built into the operating system itself, but you might also have third-party VPN software that you would then install into an operating system.

### Client-to-Site VPN

If you've ever worked from home, then you've probably used a client-to-site VPN. The client would be you, the remote user at home, and the site would be a concentrator at a central point, usually at the edge of a much larger corporate network.

All of the users and devices that are outside the building would connect to that central concentrator across the internet, and that concentrator is obviously connected to the internal corporate network. This means that all of the communication from the remote user to the concentrator are always encrypted, so we know that all of the data we're sending over the network is completely protected.

The concentrator is responsible for taking that encrypted communication, decrypting it, and sending it on its way to the resources that we're accessing inside of our corporate network.

This might also be configured as an always-on configuration, so the moment the remote user turns on and logs into their laptop, it automatically creates that link to the concentrator. This means you don't have to worry about manually starting your VPN software. If you are on your network and connected to the internet, then you always have an encrypted channel all the way back to your VPN concentrator.

### Site-to-Site VPN

For large organizations, you might have a corporate network at a central location and then you might have other remote sites at other physical locations. One of the ways that you're able to connect those sites together is through an existing internet link. Of course, we're always concerned about security and somebody being able to see the information we're sending over the internet, so it's very common for organizations to connect these sites together using a site-to-site VPN.

This is usually implemented using firewalls, so you'd have a firewall connecting to the corporate network, the internet, and then a separate firewall that's connecting to that remote site. You would then configure a site-to-site VPN between these two sites so that anytime you're sending information from your remote site back to the corporate network, it will always be going through an encrypted channel.

The firewalls act as your VPN concentrator, so anything on the inside of your network is in the clear, but anytime you have to send information across the internet to a remote site, it will always be encrypted using the site-to-site VPN.
