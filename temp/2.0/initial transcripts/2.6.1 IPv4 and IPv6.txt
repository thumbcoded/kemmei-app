0:02
if you've ever communicated across a
0:03
network then you've probably used IP
0:05
version 4 ipv4 is one of the most
0:08
popular protocols in the world and you
0:10
need to know how to configure a system
0:12
with IPv4 configuration parameters as
0:14
part of the A+ exam objectives not only
0:18
do we need to understand IP version 4 we
0:20
need to understand the most recent
0:22
version of IP which is IP version 6
0:25
there are some similarities in operation
0:27
between these two different IP versions
0:29
but there are significant differences on
0:32
how they look and how you configure them
0:33
on a system ip version 4 is a 32bit
0:38
address there are 32 ones and zeros that
0:41
work together to create that IP version
0:43
4 address from a human perspective it's
0:46
easier to represent this in a decimal
0:48
form and we represent it as four
0:50
separate decimal numbers for example on
0:53
this address we have
0:57
192.168.131 and all of those together
0:59
make up the IPv4 address if you wanted
1:02
to represent this in binary you could
1:04
write out all the ones and zeros
1:06
associated with each of those numbers
1:09
each of those four numbers is referred
1:11
to as an octet because it is made up of
1:13
eight different ones or zeros sometimes
1:16
we refer to this as a bite or eight
1:18
individual bits when you combine all of
1:21
them together you have 32 bits which is
1:23
also equal to four total bytes another
1:26
interesting thing to keep in mind is
1:28
that these eight bits together can
1:30
consist of a number between 0ero and
1:33
255 so none of these octets will ever
1:36
exceed the value of
1:39
255 for us to communicate across the
1:42
public internet every device needs to
1:44
have a unique IP address for example one
1:47
device could have an IP address of
1:49
1.1.1.1 and that device can communicate
1:52
to a device that has an IP address of
1:55
2.2.2.2 as you can probably tell there's
1:58
a finite number of IPv4 addresses that
2:00
you can create based on the combinations
2:03
of numbers that might be available and
2:05
if you do the math there are about 4.29
2:07
billion combinations of IPv4 addresses
2:10
that you could create however there are
2:13
over 20 billion different devices
2:15
connected to the internet and that
2:17
number is rapidly growing so how do we
2:19
connect and communicate between all of
2:22
these different 20 billion devices if
2:24
there's only 4.29 billion addresses to
2:27
go around one of the ways we're able to
2:29
do that is by taking some of those
2:32
addresses and changing them into a
2:34
private address using a technology known
2:37
as network address translation
2:39
orNAT on the internet public addresses
2:42
can talk to public addresses but on a
2:45
company's network there may be a single
2:47
link out to the internet where there
2:49
might be a single public IP address but
2:51
inside of their private network may be
2:54
hundreds or even thousands of other
2:56
devices that we could assign a private
2:58
address private addresses allow us to
3:00
communicate with each other inside of
3:02
our private network and using network
3:04
address translation we can communicate
3:07
outside of our network the benefit
3:09
though is that none of those private
3:10
addresses go towards that entire pool of
3:13
IP version 4 this means that we could
3:15
have hundreds or even thousands of those
3:17
devices internally and then when we need
3:20
to communicate out to the internet we
3:22
can do that over a single IP version 4
3:25
address this range of private addresses
3:27
that you might configure on your local
3:29
network is defined in an RFC numbered
3:32
1918 rfc stands for request for comment
3:36
and in this particular form this means
3:38
it's a standard that we use across the
3:41
world for IPv4 addressing if we were to
3:44
look at RFC1918 you would see three
3:46
separate ranges that you could use as
3:49
private addresses on the inside of your
3:51
network and some of these addresses
3:53
you've probably seen before for example
3:55
you can use the range
3:57
10.0.0.0 through
4:01
10.255.255.255 this allows us a
4:03
combination of over 16 million different
4:05
addresses that we could have inside of
4:07
our network which is probably why this
4:09
is one of the most popular address
4:11
ranges used inside of a large corporate
4:13
network on a smaller network you might
4:15
use the range
4:18
172.16.0.0 through
4:22
172.31.255.255 this combination gives us
4:24
just over 1 million addresses that we
4:26
could use to define private devices on
4:29
our internal network and if you use a
4:32
network at home then your local device
4:34
probably assigns IP addresses using the
4:36
last private range
4:39
192.168.0.0 through
4:44
192.168.255.255 this provides a total
4:46
number of just over 65,000 addresses
4:48
before network at home that is plenty of
4:51
IP addresses to use to be able to have a
4:54
private network internally that you
4:56
could then network address translate
4:58
into a single address on the outside of
5:00
your
5:01
network when we started designing IPv6
5:04
being able to get around this problem
5:06
with a limited number of IP addresses
5:08
was one of the major architectural
5:10
concerns for that reason IPv6 addresses
5:14
are much larger than IPv4 ip version 4
5:17
addresses are 32 bits in length and IPv6
5:21
address is 128 bits in length this
5:24
greatly expands the size of available
5:26
addresses to
5:28
340 unicilian addresses this means if
5:32
there's about 6.8 billion people each
5:34
one of those folks can have a very large
5:37
number of addresses for each individual
5:39
user this greatly expands the number of
5:42
addresses available across the world and
5:45
removes any limitations that we
5:47
previously had with IP version 4 the
5:50
structure of IPv6 is also very different
5:53
you'll see IPv6 addresses written in
5:55
hexadesimal format rather than decimal
5:58
so that we can fit a lot more of this
6:00
address into a smaller place for example
6:02
this is an IPv6 address written out with
6:05
the hexadimal ranges and double colons
6:07
and colons to separate the different
6:10
areas of the network if we were to write
6:12
this out in its full and complete form
6:14
it would be the one that is on the
6:16
screen in the middle here of FE80
6:19
col 0 0
6:21
col 0000000
6:24
0000 col 5 delta18 col 0652 colie fox
6:31
delta
6:33
8fox52 that is a very large address to
6:36
be able to write out but it gives us
6:38
enough addresses that we could use this
6:40
across the world for the global internet
6:43
and connect everyone who needs that
6:45
connectivity just like IP version 4 we
6:48
can show IP version 6 addresses in
6:51
binary and in this particular case
6:53
instead of having an octet to be a
6:55
single group in this case it's double
6:57
that size at 16 bits or two octets for
7:01
each one of these groups that's another
7:03
reason that we display this in
7:05
hexadeimal form rather than having very
7:08
large numbers with periods in between
7:11
instead we can use hexadeimal to make
7:13
this much smaller and use colons to
7:15
separate each of these individual blocks
7:17
within an IPv6 address and if you count
7:20
up the IPv6 address in total it's 128
7:24
bits in length or a total of 16 bytes
7:27
because the IPv6 address is much larger
7:30
and much more difficult to memorize than
7:32
IP version 4 DNS now becomes very
7:35
important instead of having to memorize
7:38
an IP version 6 address we'll rely on
7:40
DNS to be able to reference these
7:42
addresses by their fully qualified
7:44
domain name we also don't do a lot of
7:46
subnetting with IP version 6 because
7:49
quite frankly we don't need to we have
7:51
an enormous number of networks and an
7:53
enormous number of devices that we could
7:55
put on each of those networks usually
7:58
the first half of the IPv6 address or
8:00
the first 64 bits are considered to be
8:03
the network prefix which means the
8:05
default subnet mask for any IPv6 address
8:08
is usually a /64 that means the last 64
8:12
bits of the IPv6 address are used as the
8:15
host address so our network is the first
8:18
half and the hosts are the second half
8:21
so if you're designing and implementing
8:22
an IPv6 network you're probably using
8:25
the first half of that IPv6 address as
8:28
the network prefix and the second half
8:30
of the IPv6 address as the specific host
8:33
ID