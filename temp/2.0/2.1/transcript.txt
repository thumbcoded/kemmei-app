Introduction to IP

This video is introduction to IP and although it does not have a direct correlation back to the exam objectives, everything that's in domain 2 or the networking domain tends to build on the information that we provide in this video. If you're unfamiliar with some of the details of networking and especially of IP, I highly recommend you watch this video as a primer for the videos that are to follow.

Our networks are designed to move information from one device to another device and there is a lot of information that goes across our modern networks. We usually refer to these networks as Ethernet networks, wireless networks, DSL networks and other types. From IP's perspective it really doesn't matter what methods you're using for the transportation - the important part is what's inside of those packets that we are sending across the network.

In this video we'll talk about the network as a series of highways or roads, which means that IP or the internet protocol is going to be the truck that is driving across that road. We're going to put information into that truck, send that IP truck across the network and we're going to unpack that truck on the other side. If we were to look inside the truck we would see a lot of information. There is a box inside of the truck and we refer to that box as holding TCP or UDP information. We'll learn more about TCP and UDP later on in this video and of course just like boxes that you might use to move, inside of these TCP or UDP boxes is information that is important for us to get from one place to another.

Encapsulation and Decapsulation

You can see that we start to nest information within another. In the world of networking we refer to this as encapsulation and decapsulation. Here's a basic diagram of us sending information to a web server - on one side is our client or laptop computer and on the other side is the web server itself. In this particular example we're sending this information across an Ethernet network and all of the information that's being sent across the network is the Ethernet payload. Also included with this Ethernet payload is information at the beginning of this payload that is a header and information at the end that's a trailer. This allows us to know exactly where the data starts and where the data ends.

Of course there's more information within this Ethernet payload and if we were to look a little bit closer at that payload we would see that there's a specific kind of data contained within that payload. In this particular example we're carrying IP traffic so there is an IP payload and an IP header within that same Ethernet frame. And as you probably already expected, within this IP payload we have even more detail that consists of a TCP payload in this particular example and that TCP payload also consists of a TCP header.

We can continue to break this down since we know that this is web traffic - we know that within that TCP payload is HTTP or hypertext transfer protocol data which holds all of that web server communication. So as you can see this Ethernet frame has within it IP traffic, TCP information and HTTP information, and different protocols may have even more layers of information that we could drill into to see exactly what's being sent between these two devices.

TCP and UDP Protocols

The internet protocol or IP is one of the most popular protocols that you'll find, but you'll also notice that within that IP we commonly find TCP and UDP. TCP and UDP are very similar protocols that are used to transport information, but there are some interesting characteristics that are unique to each, and in this video we'll look at what some of those unique characteristics might be.

If you're talking to a network professional or someone taking their network plus certification, they'll often refer to TCP or UDP as an OSI layer 4 protocol. For the purposes of the A+, the OSI model is not important for us to know, but you will see that particular term show up when you're reading through different books or referencing different materials. From the purposes of a networking perspective, it's important to know that TCP and UDP allow us to communicate across multiple devices all simultaneously and send information that might be very different than each other. We refer to this as multiplexing. This allows us to send different types of traffic across the network simultaneously and have all of that information properly received on the other side.

TCP - Transmission Control Protocol

Let's look with a little more detail into TCP or the transmission control protocol. This is a protocol that we refer to as connection-oriented - that means there is a formal process to set up a conversation with the device and a formal process to end that conversation. You can think of this as making a phone call - you would put in a phone number, you would hear the phone ring on the other side, on the other side the person might say hello and you would say hello back to them, and then you can proceed with your conversation. At the end of that call you would say "It was good talking to you, goodbye." The other person would say "Goodbye," and you hang up. This is very similar to the process with TCP where there is a formal connection setup and a formal connection teardown.

You'll sometimes see TCP referred to as reliable delivery - that means that we are able to know that the information that we've sent to another device really has been received. That's because TCP includes an acknowledgement process, so TCP sends the data and the person receiving the data will send back an acknowledgement so that both sides of the conversation know that everything was received properly. If any of the information sent by the sender is damaged or corrupted in the transport process, the receiving station can send a message back to the sending device telling it that something did not work properly and they need to resend that data to be able to receive it properly.

This also allows the sender and the receiver to manage how much data is being sent at any particular time. We refer to this as flow control, and that means the receiving device can tell the sender to speed up the data or slow down the data depending on how much information it's able to receive at any particular time. It's this constant sending of data and an acknowledgement of the data that provides that reliable delivery and enables all of those TCP specific functions.

UDP - User Datagram Protocol

But there are some protocols that don't need that very detailed level of reliability and the overhead that's associated with TCP. That's why we created UDP or the user datagram protocol. We have a connection-oriented protocol with TCP and with UDP we are connectionless - there's no formal process to start the communications flow and there's no formal teardown process to end the communication. We refer to that as an unreliable delivery. Those terms are referring to the fact that there's no way to know if the data really was received on the other side because there are no acknowledgements coming back to the sender.

Since there's no acknowledgement being sent by the receiving device, we don't have any way to recover from any errors and there's no way to perform any type of retransmission. And since the sending station has no idea if everything really was received properly on the other side, there's no way to set any type of flow control. The device that's receiving all of this data has no way to send back any type of messages saying that they should speed up or slow down the data transfer process.

Given that explanation of UDP, you might be thinking why would any application want to use UDP? One advantage of UDP is that there's very little overhead - you don't have to set up any formal communication, you can simply send data and you have a best effort to get that data to the other side. A good example of an application that works exactly like this is one for real-time communication. Applications that are voice over IP related or send video across the network are all in real time. If information is lost along the way we can't stop our conversation, rewind what we were talking about and then replay that through the same connection. Once we lose that data we've lost that moment in time and there's no way to rewind time to go back to where we were. For that reason, voice over IP and any real-time communication would prefer to use UDP since it has the least amount of overhead and it doesn't have to worry about resending traffic that may have been lost.

There are other protocols that work with UDP that perform a similar function where they need low overhead and aren't concerned if the data is going to get to the other side or not. If there's any problems in that communication it will simply perform the process again from the application's perspective. A good example of these connectionless protocols would be DHCP or the dynamic host configuration protocol that we commonly use to automatically assign IP addresses on all of the devices on our networks. Another good example is TFTP or the trivial file transfer protocol which often sends very small amounts of data across the network and doesn't require any particular overhead or retransmission capability.

Fortunately, even though UDP doesn't provide any way to resend the data, the application can provide that same functionality. So instead of relying on UDP as the retransmission method, the application itself will keep track of everything that is sent back and forth and the application will decide if it ever needs to resend any traffic across the network. This requires the application itself to be able to manage that process, and some applications like voice over IP apps might not do anything if data is lost. If information doesn't make it through then it will simply continue sending the voice over IP traffic and if the users didn't receive information they'll simply ask someone to repeat what they just said.

Some applications though are very particular about making sure the data is properly received on the other side. Applications such as HTTPS which is the hypertext transfer protocol secure commonly used for our web server communication, or something like SSH for secure shell which is our terminal communication, is something that does use TCP and will resend data automatically using that TCP protocol. TCP is able to confirm that data was received by receiving acknowledgements from the receiving station, very much like you would do with a return receipt. This means the application doesn't have to worry if information was received or anything goes missing because that entire process of maintaining the data flow is managed by TCP.

IP Addresses and Port Numbers

As we mentioned earlier, this TCP or UDP data is being transported across the network using IP or the internet protocol. And again, IP is our truck, TCP and UDP are the boxes on the truck, and the network itself is the road that we drive on. If you're working with a mover to help move your house then you know that the movers are going to load up your truck with all of those boxes and they're going to move that truck from one location to another. So they need the address of where they're going to pick up this information and they need the address of where they're going to take it. In the world of networking we refer to these addresses as IP addresses, and every computer on your network has an IP address just like every house on your block has a street address.

When we send information to a web server we are sending that information to a specific IP address. These boxes of TCP or UDP data will arrive at that IP address, but then we have to decide where that particular box is going to go. Just as your house has many different rooms, you have servers that are running many different services. Your web server might also be a DNS or domain name server, it could also be a file server, and it could provide voice over IP functions. When information is received by that server it now needs to decide what room is going to receive this box so that we can properly process that data.

The operating system is sitting outside of your house and it's looking at all of the boxes that are coming in from the moving truck. Each box has the name of a room written on it and it knows that that box should go to the bedroom, another box perhaps goes to the living room, there might be a third box that goes to the kitchen. TCP and UDP work in a similar way, but instead of writing the name of the service or the room on the box that's being received, instead we're using something called a port number. So instead of having a room name you instead have different services and each service is assigned a particular number. These port numbers allow the incoming data to know exactly where that information should be sent so that it's processed properly by the appropriate application.

This means when information is being sent from one device to another there are usually at least three different types of information that are important: there is the IP address of the server, there is the TCP or UDP protocol that is being used, and then there is a port number. And from the server's perspective it would be a port number associated with that application. The sending device also has an IP address, it's sending information via TCP or UDP, and there's a port number also used by the client which is useful for sending information back to the client once the server has processed that data.

Port Number Types

As you start looking at different services and memorizing different port numbers, you'll notice that certain applications always tend to use the same port numbers. We refer to these as non-ephemeral ports or permanent port numbers. Usually these port numbers are between port zero and port 1023, but it could use any port number available to be able to define what port number is associated with an application. If you were to look at the configuration of a service that's running on a device such as a web server, an email server or a file server, you'll see that a port number is also associated with that particular service. This allows anyone who's communicating to that service to always send information with a port number that will be recognized by that service to be able to communicate to that service.

Our client needs to have not only an IP address and TCP or UDP protocol, but it needs a client port number. Client port numbers can be any number usually between 1024 and 65,535. Because these port numbers are simply used temporarily we refer to them as ephemeral ports. They are used for a single communication and once the communication to the server is over we close that connection and we don't use that port number any longer. If we need to communicate to that server again we choose a new random port number and use that as our client port number.

So now we know that a TCP or UDP port number can be any value between 0 and 65,535. If we're communicating to a server that server is probably going to use a non-ephemeral port number, but that may not always be the case. Fortunately most applications will use a port number and it will always be that port number running on that service.

Also keep in mind that these port numbers sound like they could be used for some type of security process, but in reality they're simply a number that's used for reference. They're not designed to be a security mechanism and it's very easy to find a port number on a service even if someone may have changed the port number to something else. In fact we often refer to these port numbers on a server as a well-known port number because you need to know the port number in order to communicate to that particular service.

Also keep in mind that TCP port numbers have a range between 0 and 65,535 and UDP port numbers also have a range between 0 and 65,535, but a TCP port 80 is not the same thing as a UDP port 80. These are different protocols that have a similar numbering scheme for their port numbers, but the port numbers are unique to each individual protocol.

Example: Multiple Communications

Here's an example of a client and a server having multiple forms of communication occurring simultaneously across the network and using different port numbers in order to do that. In this example we have a server and on this server are three different services: there's a web server running at TCP port 80, there's a voice over IP server running at UDP port 5004, and there's an email server using TCP port 143. That means we'll have three different types of communication going between our client and our server.

Notice that our client has an IP address of 10.0.0.1 and our server has an IP address of 10.0.0.2. You can see that we're sending information across an Ethernet network because we have an Ethernet header and an Ethernet trailer. Inside of each of these communications is IP because IP is the protocol that we use the most for communication. But notice that inside of these IP packets some of these have TCP traffic, others have UDP traffic, and you can see that the TCP traffic may be HTTP data using port 80, it might be voice over IP data using UDP port 5004, or email data using port 143.

If we were to look at a protocol decode of this information we get a lot more detail about the communication that's occurring. We know that we have a source IP of 10.0.0.1 and a destination IP of 10.0.0.2 - that matches the IP address of the client and the IP address of the server. Each of these communication flows have the same source IP and destination IP. Notice that there are differences though inside of those IP packets. You can see in each of these examples that the destination port is the port that we listed above or the well-known port for that particular application, but notice that the source port is using a random number and each of these traffic flows is using a very different source port. That's because those are ephemeral ports - they're temporary ports that we're simply using to be able to send this information to the server and receive information back.

If this client needed to send additional traffic flows to this server then it would choose another random port number and send another flow of traffic that had some application data inside of it. This is the process that's occurring for every device on your network to be able to send traffic from one place to another, whether that's on a local server or across the internet. The process is exactly the same, all thanks to IP, TCP and UDP.

Common Port Numbers

As we've discussed in a previous video, the port numbers used by TCP and UDP can be very important when trying to communicate to a service, so it's useful to know what those port numbers are if you're trying to troubleshoot any type of communications issue. We might also need to know these port numbers if we're performing some type of firewall configuration. Our firewalls often use TCP and UDP port numbers as one of the criteria that it uses to allow or to block network traffic.

As you go through this video you'll find there are a number of port numbers that you're required to know as part of your A+ studies. You'll find that memorizing these port numbers can sometimes feel a bit tedious, but after you start using these applications, configuring firewalls and troubleshooting network communication, you'll find that most of these port numbers become second nature. For the purposes of your A+ studies, make sure that you understand not only the port number and the protocol associated with it, but that you understand why that particular protocol is important and how it's used on the network.

FTP - File Transfer Protocol (TCP 20, 21)

The first port numbers we'll look at are port numbers TCP Port 20 and TCP Port 21. These two port numbers are commonly associated with FTP or the file transfer protocol. FTP is a generic file transfer protocol that could be used by many different operating systems to transfer information from one device to another, and different types of FTP may use one or both of these protocols. TCP Port 20 is often used as the active data transfer and Port 21 is often used as the administration or control port.

The FTP protocol often requires you to have some type of authentication into this system, so it may ask for a username, a password or some other type of authentication factor. FTP can also be configured with an anonymous or generic login so that anyone can log in regardless of what the username or password might be. FTP is also a full-featured protocol that not only can transfer a file but can list the files available in a particular directory. We can add, delete, change the file name and perform other administration functions as well.

SSH - Secure Shell (TCP 22)

As part of our tasks as server administrators or network administrators, we are often required to connect to our remote device and make configuration changes at the command line. To be able to do this securely across the network we need to use a protocol that can encrypt all of this data as we're sending it from one side to the other. The most common protocol used for this function is SSH or secure shell. It provides an encrypted communication link over TCP Port 22. This is very similar to the old style telnet protocol, but telnet is one that we commonly no longer see in use because it does not provide any type of encryption. If you're communicating at the command line to a server you should always be using SSH, and you'll find that it almost always is using TCP Port 22.

Telnet (TCP 23)

However, you may find that there is a system in your network that is very old that does not support SSH and the only way to administer that device at the command line is using the older telnet protocol. Telnet stands for telecommunications network and it commonly communicates over TCP Port 23. Visually and functionally this works identical to SSH - you have a command line, you can log into a device with your username and password, you can administer that device remotely, but the major difference is that all of the communication used for telnet is in the clear. There's no encryption used for telnet, and that's why most organizations will prevent anyone from using the telnet protocol and instead recommend that you use SSH to perform this communication.

SMTP - Simple Mail Transfer Protocol (TCP 25)

Email continues to be one of the most popular forms of communication across our networks, and to be able to facilitate that communication we need some type of protocol that can send mail from one server to another. That protocol is the simple mail transfer protocol or SMTP. SMTP commonly uses TCP Port 25 to be able to send these email messages from one email server to another. You may also find that some devices are configured to send information to the email server initially also using this SMTP protocol, so not only are you configuring this on your mail server, you may also find that you're configuring SMTP with the appropriate port number on your local device. To be able to receive email messages we would commonly use protocols such as IMAP or POP3, and we'll talk about those protocols and their associated port numbers later in this video.

DNS - Domain Name System (UDP 53)

In these videos so far we've talked a lot about devices able to communicate with each other using IP or Internet Protocol. The Internet Protocol address is one very similar to what you would see here: 162.159.246.164. But when we're typing things into our browser we're not typing in a bunch of numbers, we're typing in the name of a website such as www.professormesser.com. In order to translate this fully qualified domain name into a usable IP address for network communication, we need to perform a translation using the domain name system or DNS. DNS commonly uses UDP Port 53.

As you can imagine, DNS is a very popular and important service because we almost never memorize IP addresses to be able to communicate to these devices, but it's very common to remember the fully qualified domain name. For that reason it's very common to have multiple DNS servers for redundancy so that we are always able to resolve the fully qualified domain name to the appropriate IP address.

DHCP - Dynamic Host Configuration Protocol (UDP 67, 68)

The computer on your network was probably not manually configured with a set of IP addresses, subnet masks, default gateways or DNS servers. This was done automatically when you turn your computer on using the dynamic host configuration protocol or DHCP. DHCP happens automatically behind the scenes and it makes the entire process of configuring your system with these addresses completely seamless. DHCP commonly uses UDP Port 67 and UDP Port 68.

On your network is a DHCP service that may be on a standalone server or appliance or may be integrated into a small office home office wireless router that you might have at home. On this server is a pool of available IP addresses, and when a device connects to the network it requests an IP address and configuration parameters from that pool. When a device starts up it receives that IP address and it leases that IP address for a certain amount of time. When that lease is up it can choose to renew the lease or give the IP address back and put it into the pool for someone else to use.

System administrators can also use DHCP to manually configure IP addresses that will always be assigned to particular devices. So if you have a printer or server that you would like to always have the same IP address, you can reserve that IP address in your DHCP server and it will be automatically assigned with the same IP address every time that printer or server starts up.

HTTP/HTTPS - Hypertext Transfer Protocol (TCP 80, 443)

You're probably watching this video in a browser, and to be able to perform that functionality you're probably using HTTP or HTTPS. This is the hypertext transfer protocol or hypertext transfer protocol secure. The standard form of HTTP sends all of the HTTP data over a non-encrypted or in the clear communication and it often uses TCP Port 80. If you see any traffic using TCP Port 443, it's probably using the secure version of HTTP which means that all of that web communication inside of that packet will be encrypted. A large percentage of the devices you communicate to in your browser are probably going to use HTTPS these days, but you'll still find a number of web services that are not using the encrypted version and instead are sending all of their traffic via TCP Port 80 and the HTTP protocol.

POP3 and IMAP - Email Retrieval Protocols (TCP 110, 143)

If you're using an email client on your computer or your mobile device, you may be receiving emails using a number of different protocols. Two of the more popular protocols are POP3 and IMAP. POP3 is the post office protocol version three and it commonly uses TCP Port 110 to be able to transfer data down to your computer.

A newer and somewhat more functional protocol for receiving email is IMAP4 or the internet message access protocol version 4. IMAP commonly uses TCP Port 143. IMAP provides a number of additional features not available in POP3, such as the management of the inbox from multiple clients. You're able to make folders and transfer emails into those folders, and all of those updates will be synchronized across all of your different systems and all of those updates will be synchronized across all of your different email clients.

SMB/NetBIOS - Windows File Sharing (TCP 139, 445; UDP 137)

If you're using Microsoft Windows, there's a process for transferring data within Windows that uses a protocol named server message block or SMB. You may also see this referred to as the common internet file system or CIFS. Not only is this used for file transfers, it's used to send information to printer queues and for other processes where Windows needs to communicate information between different Windows devices.

Older Windows devices used an additional protocol inside of TCP/IP called NetBIOS. This NetBIOS protocol used two primary port numbers to be able to communicate: UDP Port 137 used a NetBIOS name service which is very similar to the DNS name service that we talked about earlier, and to be able to set up sessions to transfer files it uses TCP Port 139.

On most modern versions of Windows you'll find direct connectivity between IP addresses that don't use the NetBIOS protocol. We refer to that as direct communication or NetBIOS-less communication and it often uses TCP Port 445.

LDAP - Lightweight Directory Access Protocol (TCP 389)

Most organizations will have a central database that contains all of the important information about the devices, users and important resources available on their network. This is usually a directory of services or a database that contains all of this information, and to be able to access this database we use a standard set of protocols. One of these protocols is LDAP or LDAPS. This stands for the lightweight directory access protocol or the lightweight directory access protocol secure. LDAP commonly uses TCP port 389.

This directory is usually separated into different categories such as an organization, an organizational unit or a common name. For example, at Messer Studios we might have a production organizational unit, a support organizational unit and an engineering organizational unit. And of course within those there may be individuals using a common name such as Sam or Daniel, and we might also have a database called Tech Docs. Using LDAP we can refer to this database to find where these components might be and in some cases even provide additional details such as authentication for any individual users.

A very common use of LDAP is Microsoft's active directory infrastructure where that database is able to be referenced using the LDAP protocol.

RDP - Remote Desktop Protocol (TCP 3389)

If you are troubleshooting technology then you're probably very familiar with remote control access of a separate machine. These days we have users around the world and it's not very practical for you to visit every single one of those users directly to be able to solve problems on their computer. In those cases we'll probably use some type of remote access protocol such as RDP or remote desktop protocol. This allows you to view and share the desktop on a remote device using TCP Port 3389.

This is primarily used to access Windows devices and to be able to control those Windows devices across the network. You can usually do this from a Windows device itself or from many other operating systems as well. You can use RDP to control an entire computer or to simply run a single application on that remote computer. And although RDP is commonly associated with connecting to Windows devices, there are also many RDP clients that would allow you to connect to that Windows computer from macOS, Linux, Unix, iPhone and other operating systems as well.
